@using Microsoft.AspNetCore.Components.Web
@namespace BlazorDatasource.Server.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
<!DOCTYPE html>
<html lang="en" class="scroll-smooth">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link href="https://rsms.me/inter/inter.css" rel="stylesheet">
    <link href="css/tailwind/tailwind.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body class="text-base">
    @RenderBody()
    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>
    <script src="_framework/blazor.server.js"></script>
    <script>
        window.downloadFileFromStream = async (fileName, contentStreamReference) => {
            const arrayBuffer = await contentStreamReference.arrayBuffer();
            const blob = new Blob([arrayBuffer]);
            const url = URL.createObjectURL(blob);
            const anchorElement = document.createElement('a');
            anchorElement.href = url;
            anchorElement.download = fileName ?? '';
            anchorElement.click();
            anchorElement.remove();
            URL.revokeObjectURL(url);
        };
    </script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
        window.createNewLineMultipleChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'line',
                data: {
                    labels: params.labels,
                    datasets: params.data,
                },
                options: {
                    plugins: {
                        'samples-filler-analyser': {
                            target: 'chart-analyser'
                        }
                    },
                    interaction: {
                        intersect: true,
                    },
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        window.createNewBarMultipleChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'bar',
                data: {
                    labels: params.labels,
                    datasets: params.data,
                },
                options: {
                    indexAxis: 'x',
                    plugins: {
                        'samples-filler-analyser': {
                            target: 'chart-analyser'
                        }
                    },
                    interaction: {
                        intersect: true,
                    }, 
                    elements: {
                        bar: {
                            borderWidth: 2,
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    },
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        window.createNewHorizontalBarMultipleChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'bar',
                data: {
                    labels: params.labels,
                    datasets: params.data,
                },
                options: {
                    indexAxis: 'y',
                    plugins: {
                        'samples-filler-analyser': {
                            target: 'chart-analyser'
                        }
                    },
                    interaction: {
                        intersect: true,
                    },
                    elements: {
                        bar: {
                            borderWidth: 2,
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    },
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        window.createNewPieMultipleChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'pie',
                data: {
                    labels: params.labels,
                    datasets: params.data,
                },
                options: {
                    indexAxis: 'x',
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        window.createNewDoughnutMultipleChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'doughnut',
                data: {
                    labels: params.labels,
                    datasets: params.data,
                },
                options: {
                    indexAxis: 'x',
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        window.createNewScatterMultipleChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'scatter',
                data: {
                    labels: params.labels,
                    datasets: params.data,
                },
                options: {
                    indexAxis: 'x',
                    // Elements options apply to all of the options unless overridden in a dataset
                    // In this case, we are setting the border of each horizontal bar to be 2px wide
                    scales: {
                        x: {
                            type: 'category',
                            position: 'bottom'
                        }
                    },
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };
        window.createNewAreaMultipleChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'line',
                data: {
                    labels: params.labels,
                    datasets: params.data,
                },
                options: {
                    indexAxis: 'x',
                    // Elements options apply to all of the options unless overridden in a dataset
                    // In this case, we are setting the border of each horizontal bar to be 2px wide
                    scales: {
                        x: {
                            type: 'category',
                            position: 'bottom'
                        }
                    },
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        // draw a new chart given X/Y values
        window.createNewLineChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'line',
                data: {
                    datasets: [{
                        data: params.ys
                    }],
                    labels: params.xs
                },
                options: {
                    indexAxis: 'x',
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        // draw a new chart given X/Y values
        window.createNewBarChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'bar',
                data: {
                    datasets: [{
                        data: params.ys
                    }],
                    labels: params.xs
                },
                options: {
                    indexAxis: 'x',
                    // Elements options apply to all of the options unless overridden in a dataset
                    // In this case, we are setting the border of each horizontal bar to be 2px wide
                    elements: {
                        bar: {
                            borderWidth: 2,
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false
                        }
                    },
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }

        };

        // draw a new chart given X/Y values
        window.createNewHorizontalBarChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'bar',
                data: {
                    datasets: [{
                        data: params.ys
                    }],
                    labels: params.xs
                },
                options: {
                    indexAxis: 'y',
                    // Elements options apply to all of the options unless overridden in a dataset
                    // In this case, we are setting the border of each horizontal bar to be 2px wide
                    elements: {
                        bar: {
                            borderWidth: 2,
                        }
                    },
                    scales: {
                        x: {
                            beginAtZero: false
                        }
                    },
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        // draw a new chart given X/Y values
        window.createNewPieChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'pie',
                data: {
                    datasets: [{
                        data: params.ys
                    }],
                    labels: params.xs
                },
                options: {
                    indexAxis: 'x',
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        // draw a new chart given X/Y values
        window.createNewDoughnutChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'doughnut',
                data: {
                    datasets: [{
                        data: params.ys
                    }],
                    labels: params.xs
                },
                options: {
                    indexAxis: 'x',
                    responsive: true,
                    plugins: {
                        legend: {
                            display: true,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        // draw a new chart given X/Y values
        window.createNewScatterChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'scatter',
                data: {
                    datasets: [{
                        data: params.ys
                    }],
                    labels: params.xs
                },
                options: {
                    indexAxis: 'x',
                    // Elements options apply to all of the options unless overridden in a dataset
                    // In this case, we are setting the border of each horizontal bar to be 2px wide
                    scales: {
                        x: {
                            type: 'category',
                            position: 'bottom'
                        }
                    },
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };

        // draw a new chart given X/Y values
        window.createNewAreaChart = (params) => {
            var targetDiv = document.getElementById(params.target);
            if (targetDiv == null)
                return;
            const config = {
                type: 'line',
                data: {
                    datasets: [{
                        data: params.ys,
                        fill: 'origin'
                    }],
                    labels: params.xs
                },
                options: {
                    indexAxis: 'x',
                    // Elements options apply to all of the options unless overridden in a dataset
                    // In this case, we are setting the border of each horizontal bar to be 2px wide
                    scales: {
                        x: {
                            type: 'category',
                            position: 'bottom'
                        }
                    },
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false,
                            position: 'right'
                        }
                    }
                },
            };
            const chart = Chart.getChart(targetDiv);
            if (chart === undefined) {
                new Chart(targetDiv, config);
            }
            else {
                chart.destroy();
                new Chart(targetDiv, config);
            }
        };
    </script>
</body>
</html>
