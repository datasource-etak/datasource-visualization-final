@page "/dashboard/datasets/downloaded/view/{DownloadedDatasetUUId?}/{DownloadedDatasetName?}/{DownloadedDatasetAlias?}/{ParamHorizontalAxis?}/{ParamVerticalAxis?}/{ParamData?}/{ParamChartType?}"
@using Microsoft.AspNetCore.Mvc.Rendering;
@using BlazorDatasource.Server.Models.Common
@attribute [Authorize]
<PageTitle>Datasource | @T["Datasets.Downloaded.View"]</PageTitle>
<script>
    window.showDivFor5Seconds = function (divId) {
        var div = document.getElementById(divId);
        div.style.display = 'block';
        setTimeout(function () {
            div.style.display = 'none';
        }, 5000);
    };
</script>
<div class="max-w-7xl py-6 sm:px-6 lg:px-8" style="display:flex; flex-direction: row">
    <div class="max-w-none" style="margin-right:auto;">
        <article class="prose xl:max-w-none">
            <h1>@T["Datasets.Downloaded.View.Title"]</h1>
        </article>
    </div>
    @if (@Status is not null && @Status != "")
    {
        <div style="display:flex;align-self:center;" class="text-white border-solid rounded-lg bg-primary-500 px-2 py-1">@Status</div>
    }
</div>
<div class="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-none">
        @if (Loading)
        {
            <div class="flex p-4 mb-4 text-sm text-info-800 border border-info-300 rounded-lg bg-info-50" role="alert">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span class="sr-only">@T["Common.Loading"]</span>
                <div>
                    <span class="font-medium">@T["Common.Loading"]</span>
                </div>
            </div>
        }
        else
        {
            @if (Error)
            {
                <div class="flex p-4 mb-4 bg-error-200 border-t-4 border-error-500 text-error-700" role="alert">
                    <svg class="flex-shrink-0 w-5 h-5 text-error-700 mr-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                    </svg>
                    <div class="ml-3 text-sm font-medium">
                        @ErrorMessage
                    </div>
                    <button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-error-200 text-error-500 rounded-lg focus:ring-2 focus:ring-error-400 p-1.5 hover:bg-error-50 inline-flex h-8 w-8" aria-label="Close" @onclick="async() => { Error = false;}">
                        <span class="sr-only">Dismiss</span>
                        <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>
            }
            @if (RenderProperties)
            {
                <div class="overflow-hidden bg-white border border-secondary-300 shadow sm:rounded-lg mt-2">
                    <div class="px-4 py-5 sm:px-6">
                        <h3 class="text-base font-semibold leading-6 text-gray-900">@T["Datasets.Downloaded.View.Info"]</h3>
                    </div>
                    <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                        <div style="display: flex; flex-direction: row">
                            <div style="display: flex; flex-direction: column; width: 50%" class="mb-4">
                                <div style="font-size: 14px; "><strong>Name:</strong> @DownloadedDataset?.DatasetName</div>
                                <div style="font-size: 12px; "><strong>Alias:</strong> @DownloadedDataset?.Alias</div>
                                <div style="font-size: 12px; ">Id: @DownloadedDataset?.Uuid</div>
                            </div>
                            <div style="display: flex; flex-direction: column; width: 50%" class="mb-4">
                                <div style="font-size: 12px; line-height: 12px;"><strong><span style="font-size: 14px;">Description:</span></strong> @DownloadedDataset?.DatasetDescription</div>
                                <div style="font-size: 12px; ">
                                    <strong><span style="font-size: 14px;">Filters: </span></strong>
                                    @foreach (var filter in DownloadedDataset?.AssociatedFilter?.Keys!)
                                    {
                                        <div><strong>@filter</strong></div>
                                        <div style="max-height: 100px; overflow: auto;font-size: 11px; line-height: 14px;">(@string.Join(",", DownloadedDataset?.AssociatedFilter[filter]))</div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="overflow-hidden bg-white border border-secondary-300 shadow sm:rounded-lg z-10 mt-2">
                    <div class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 p-4">
                        @if (Results is not null && Results.Data.Count() > 0)
                        {
                            <div class="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
                                @if (AvailablePageSizes is not null)
                                {
                                    var pageSizes = AvailablePageSizes.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
                                    var pageSizeOptions = new List<SelectListItem>();
                                    if (pageSizes.Any())
                                    {
                                        if (PageSize <= 0 || !pageSizes.Contains(PageSize.ToString()))
                                        {
                                            if (int.TryParse(pageSizes.FirstOrDefault(), out var temp))
                                            {
                                                if (temp > 0)
                                                    PageSize = temp;
                                            }
                                        }
                                        foreach (var pageSize in pageSizes)
                                        {
                                            if (!int.TryParse(pageSize, out var temp))
                                                continue;

                                            if (temp <= 0)
                                                continue;

                                            pageSizeOptions.Add(new SelectListItem() { Text = pageSize, Value = pageSize });
                                        }
                                        if (pageSizeOptions.Any())
                                        {
                                            pageSizeOptions = pageSizeOptions.OrderBy(x => int.Parse(x.Value)).ToList();

                                            if (PageSize <= 0)
                                            {
                                                PageSize = int.Parse(pageSizeOptions.First().Value);
                                            }
                                            <select value="@PageSize" @onchange="OnPageSizeChanged" class="w-full md:w-auto items-center justify-center py-2 pr-8 text-sm font-medium text-secondary-900 focus:outline-none bg-white rounded-lg border border-secondary-300 hover:bg-secondary-100 hover:text-primary-700 focus:z-10">
                                                @foreach (var pageSizeOption in pageSizeOptions)
                                                {
                                                    <option value="@pageSizeOption.Value">
                                                        @pageSizeOption.Text
                                                    </option>
                                                }
                                            </select>
                                        }
                                    }
                                }
                                <div class="flex items-center space-x-3 w-full md:w-auto">
                                    <button class="relative inline-flex items-center rounded-md border border-secondary-300 bg-white px-4 py-2 text-sm font-medium text-secondary-700 hover:bg-secondary-200 hover:text-primary-700 focus:z-20" @onclick=@(async () => await ReloadAsync()) disabled="@Busy">
                                        <span class="sr-only">@T["Common.Refresh"]</span>
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="-ml-1 mr-2 h-5 w-5 text-secondary-500">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
                                        </svg>
                                        @T["Common.Refresh"]
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="overflow-x-auto">
                        @if (Results is null)
                        {
                            <div class="flex p-4 bg-warning-200 border-t-4 border-warning-500 text-warning-700" role="alert">
                                <svg class="flex-shrink-0 w-5 h-5 text-warning-700 mr-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                                </svg>
                                <div class="ml-3 text-sm font-medium">
                                    @T["Datasets.RemoteError"]
                                </div>
                            </div>
                        }
                        else
                        {
                            @if (Results.Data.Count() <= 0)
                            {
                                <div class="flex p-4 bg-warning-200 border-t-4 border-warning-500 text-warning-700" role="alert">
                                    <svg class="flex-shrink-0 w-5 h-5 text-warning-700 mr-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                                    </svg>
                                    <div class="ml-3 text-sm font-medium">
                                        @T["Datasets.Downloaded.View.NoTimelinesFound"]
                                    </div>
                                </div>
                            }
                            else
                            {
                                @foreach (var downloadedDataset in Results.Data)
                                {
                                    <div class="overflow-hidden bg-white">
                                        <div class="border-t border-secondary-200 border-b-1 border-success-500">
                                            <dl>
                                                @foreach (var property in downloadedDataset.Properties)
                                                {
                                                    <div class="bg-secondary-100 px-4 py-1 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                                        <dt class="text-sm font-medium text-secondary-500" style="overflow-wrap:break-word">@property.Key</dt>
                                                        <dd class="mt-1 text-sm text-secondary-900 sm:col-span-2 sm:mt-0" style="overflow-wrap:break-word">@property.Value</dd>
                                                    </div>
                                                }
                                            </dl>
                                        </div>
                                    </div>
                                }
                                <Pager @bind-PageNumber="Page" PageSize="PageSize" TotalItems="Results.RecordsTotal" RefreshRequestedHandler="async() => { await ReloadAsync(); }" />
                            }
                        }
                    </div>
                </div>
            }
            <div class="overflow-hidden bg-white border border-secondary-300 shadow sm:rounded-lg mt-2">
                <div class="px-4 py-5 sm:px-6">
                    <h3 class="text-base font-semibold leading-6 text-gray-900">@T["Datasets.Downloaded.View.ChartData.Options"]</h3>
                </div>
                <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                    <span class="ml-3 text-sm font-medium text-secondary-900">@T["Datasets.Downloaded.View.SelectXAxis"]</span>
                    <select @bind="SelectedXAxis" class="w-full md:w-auto items-center justify-center py-2 pr-8 text-sm font-medium text-secondary-900 focus:outline-none bg-white rounded-lg border border-secondary-300 hover:bg-secondary-100 hover:text-primary-700 focus:z-10">
                        <option value=null>(Select X axis)</option>
                        @foreach (var axis in AxisList!)
                        {
                            <option value="@axis">
                                @axis
                            </option>
                        }
                    </select>

                    <span class="ml-3 text-sm font-medium text-secondary-900">@T["Datasets.Downloaded.View.SelectYAxis"]</span>
                    <select @bind="SelectedYAxis" class="w-full md:w-auto items-center justify-center py-2 pr-8 text-sm font-medium text-secondary-900 focus:outline-none bg-white rounded-lg border border-secondary-300 hover:bg-secondary-100 hover:text-primary-700 focus:z-10">
                        <option value=null>(Select Y axis)</option>
                        @foreach (var axis in AxisList!)
                        {
                            <option value="@axis">
                                @axis
                            </option>
                        }
                    </select>

                    <span class="ml-3 text-sm font-medium text-secondary-900">@T["Datasets.Downloaded.View.SelectData"]</span>
                    <select @bind="SelectedData" class="w-full md:w-auto items-center justify-center py-2 pr-8 text-sm font-medium text-secondary-900 focus:outline-none bg-white rounded-lg border border-secondary-300 hover:bg-secondary-100 hover:text-primary-700 focus:z-10">
                        <option value=null>(Select data)</option>
                        @foreach (var axis in AxisList!)
                        {
                            <option value="@axis">
                                @axis
                            </option>
                        }
                    </select>

                    <span class="ml-3 text-sm font-medium text-secondary-900">@T["Datasets.Downloaded.View.ChartType"]</span>
                    <select @bind="SelectedChartType" class="w-full md:w-auto items-center justify-center py-2 pr-8 text-sm font-medium text-secondary-900 focus:outline-none bg-white rounded-lg border border-secondary-300 hover:bg-secondary-100 hover:text-primary-700 focus:z-10">
                        @foreach (var chartType in Enum.GetValues(typeof(ChartType)).Cast<ChartType>().OrderBy(c => c.ToString()))
                        {
                            <option value="@chartType">@chartType</option>
                        }
                    </select>
                </div>
                <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                    @if (SelectedData != null && SelectedXAxis != null && SelectedYAxis != null)
                    {
                        <button style="margin-right: 8px;" class="text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2"
                                @onclick="OnGenerateClick">
                            @T["Datasets.Generate"]
                        </button>
                    }
                    @if (ChartDataMultiple.Labels.Count > 0 && ShowSaveFavorite)
                    {
                        <button class="bg-warning-200 hover:bg-warning-200 focus:ring-4 focus:outline-none focus:ring-secondary-300 font-medium rounded-lg text-sm px-4 py-2"
                                @onclick="OnSaveFavoriteClick">
                            @T["Datasets.SaveFavorite"]
                        </button>
                    }
                </div>
            </div>
            @if (SelectedData != null && SelectedXAxis != null && SelectedYAxis != null && ChartData.Count > 0)
            {
                <div class="relative z-10 @(DisplayCharts ? "visible" : "invisible")">
                    <div class="space-y-6">
                        <Chart ChartTitle="@DownloadedDatasetName" ChartDataMultiple="ChartDataMultiple" Busy="Busy" IsDefaultDatasetViewChart="DefaultChartType == Models.Common.ChartType.Line" Type="@SelectedChartType"/>
                    </div>
                </div>
            }
            @if (SelectedData != null && SelectedXAxis != null && SelectedYAxis != null)
            {
                <div class="overflow-hidden bg-white border border-secondary-300 shadow sm:rounded-lg mt-2">
                    <div class="px-4 py-5 sm:px-6">
                        <h3 class="text-base font-semibold leading-6 text-gray-900">@T["Datasets.Downloaded.View.ChartData.Share"]</h3>
                    </div>
                    <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                        <span class="ml-3 mr-3 text-sm font-medium text-secondary-900">@T["Datasets.Downloaded.View.SharedUsername"]</span>
                        <input @bind="@SharedTo" @bind:event="oninput" type="text" class="rounded-2xl" />
                    </div>
                    <div class="border-t border-gray-200 px-4 py-5 sm:px-6">
                        @if (SharedTo is not null && SharedTo != string.Empty)
                        {
                            <button type="button" @onclick="OnShareClick" disabled="@Busy" class="mt-3 w-full sm:mt-0 sm:w-auto sm:text-sm inline-flex justify-center rounded-md border border-transparent bg-primary-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-primary-700">
                                @if (Busy)
                                {
                                    <svg class="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    @T["Common.Busy"]
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="-ml-1 mr-3 h-5 w-5 hidden sm:block">
                                        <path d="M17.5 3A3.5 3.5 0 0 0 14 7L8.1 9.8A3.5 3.5 0 0 0 2 12a3.5 3.5 0 0 0 6.1 2.3l6 2.7-.1.5a3.5 3.5 0 1 0 1-2.3l-6-2.7a3.5 3.5 0 0 0 0-1L15 9a3.5 3.5 0 0 0 6-2.4c0-2-1.6-3.5-3.5-3.5Z" />
                                    </svg>
                                    @T["Datasets.Share"]
                                }
                            </button>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>