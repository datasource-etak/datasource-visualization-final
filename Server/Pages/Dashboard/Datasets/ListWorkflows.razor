@page "/dashboard/datasets/workflows/list"
@using BlazorDatasource.Server.Models.Dataset;
@using Microsoft.AspNetCore.Mvc.Rendering;
@attribute [Authorize]
<PageTitle>Datasource | @T["Workflows.List"]</PageTitle>
<div class="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-none">
        <article class="prose xl:max-w-none">
            <h1>@T["Workflows.List.Title"]</h1>
        </article>
    </div>
</div>
<div class="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-none">
        @if (Loading)
        {
            <div class="flex p-4 mb-4 text-sm text-info-800 border border-info-300 rounded-lg bg-info-50" role="alert">
                <svg class="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span class="sr-only">@T["Common.Loading"]</span>
                <div>
                    <span class="font-medium">@T["Common.Loading"]</span>
                </div>
            </div>
        }
        else
        {
            @if (Error)
            {
                <div class="flex p-4 mb-4 bg-error-200 border-t-4 border-error-500 text-error-700" role="alert">
                    <svg class="flex-shrink-0 w-5 h-5 text-error-700 mr-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                    </svg>
                    <div class="ml-3 text-sm font-medium">
                        @ErrorMessage
                    </div>
                    <button type="button" class="ml-auto -mx-1.5 -my-1.5 bg-error-200 text-error-500 rounded-lg focus:ring-2 focus:ring-error-400 p-1.5 hover:bg-error-50 inline-flex h-8 w-8" aria-label="Close" @onclick="async() => { Error = false;}">
                        <span class="sr-only">Dismiss</span>
                        <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                        </svg>
                    </button>
                </div>
            }
            <div class="overflow-hidden bg-white border border-secondary-300 shadow sm:rounded-lg z-10">
                <div class="flex flex-col md:flex-row items-center justify-between space-y-3 md:space-y-0 md:space-x-4 p-4">
                    @if (Results is not null && Results.Data.Count() > 0)
                    {
                        <div class="w-full md:w-auto flex flex-col md:flex-row space-y-2 md:space-y-0 items-stretch md:items-center justify-end md:space-x-3 flex-shrink-0">
                            @if (AvailablePageSizes is not null)
                            {
                                var pageSizes = AvailablePageSizes.Split(new[] { ',', ' ' }, StringSplitOptions.RemoveEmptyEntries);
                                var pageSizeOptions = new List<SelectListItem>();
                                if (pageSizes.Any())
                                {
                                    if (PageSize <= 0 || !pageSizes.Contains(PageSize.ToString()))
                                    {
                                        if (int.TryParse(pageSizes.FirstOrDefault(), out var temp))
                                        {
                                            if (temp > 0)
                                                PageSize = temp;
                                        }
                                    }
                                    foreach (var pageSize in pageSizes)
                                    {
                                        if (!int.TryParse(pageSize, out var temp))
                                            continue;

                                        if (temp <= 0)
                                            continue;

                                        pageSizeOptions.Add(new SelectListItem() { Text = pageSize, Value = pageSize });
                                    }
                                    if (pageSizeOptions.Any())
                                    {
                                        pageSizeOptions = pageSizeOptions.OrderBy(x => int.Parse(x.Value)).ToList();

                                        if (PageSize <= 0)
                                        {
                                            PageSize = int.Parse(pageSizeOptions.First().Value);
                                        }
                                        <select value="@PageSize" @onchange="OnPageSizeChanged" class="w-full md:w-auto items-center justify-center py-2 pr-8 text-sm font-medium text-secondary-900 focus:outline-none bg-white rounded-lg border border-secondary-300 hover:bg-secondary-100 hover:text-primary-700 focus:z-10">
                                            @foreach (var pageSizeOption in pageSizeOptions)
                                            {
                                                <option value="@pageSizeOption.Value">
                                                    @pageSizeOption.Text
                                                </option>
                                            }
                                        </select>
                                    }
                                }
                            }
                            <div class="flex items-center space-x-3 w-full md:w-auto">
                                <button class="relative inline-flex items-center rounded-md border border-secondary-300 bg-white px-4 py-2 text-sm font-medium text-secondary-700 hover:bg-secondary-200 hover:text-primary-700 focus:z-20" @onclick=@(async () => await ReloadAsync()) disabled="@Busy">
                                    <span class="sr-only">@T["Common.Refresh"]</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="-ml-1 mr-2 h-5 w-5 text-secondary-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
                                    </svg>
                                    @T["Common.Refresh"]
                                </button>
                            </div>
                        </div>
                    }
                </div>
                <div class="overflow-x-auto">
                    @if (Results is null)
                    {
                        <div class="flex p-4 bg-warning-200 border-t-4 border-warning-500 text-warning-700" role="alert">
                            <svg class="flex-shrink-0 w-5 h-5 text-warning-700 mr-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                            </svg>
                            <div class="ml-3 text-sm font-medium">
                                @T["Datasets.RemoteError"]
                            </div>
                        </div>
                    }
                    else
                    {
                        @if (Results.Data.Count() <= 0)
                        {
                            <div class="flex p-4 bg-warning-200 border-t-4 border-warning-500 text-warning-700" role="alert">
                                <svg class="flex-shrink-0 w-5 h-5 text-warning-700 mr-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                                </svg>
                                <div class="ml-3 text-sm font-medium">
                                    @T["Datasets.Downloaded.NoDownloadedDatasetsFound"]
                                </div>
                            </div>
                        }
                        else
                        {
                            @foreach (var workflow in Results.Data)
                            {
                                <div class="overflow-hidden bg-white">
                                    <div class="border-t border-secondary-200 border-b-1 border-success-500">
                                        <dl>
                                            <div class="bg-secondary-100 px-4 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6 pt-8">
                                                <dt class="text-sm font-medium text-secondary-500">@T["Workflows.Fields.Uuid"]</dt>
                                                <dd class="mt-1 text-sm text-secondary-900 sm:col-span-2 sm:mt-0">@workflow.Uuid</dd>
                                            </div>
                                            <div class="bg-secondary-100 px-4 py-1 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                                <dt class="text-sm font-medium text-secondary-500">@T["Workflows.Fields.Alias"]</dt>
                                                <dd class="mt-1 text-sm text-secondary-900 sm:col-span-2 sm:mt-0">@workflow.Alias</dd>
                                            </div>
                                            <div class="bg-secondary-100 px-4 py-1 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                                <dt class="text-sm font-medium text-secondary-500">@T["Workflows.Fields.Description"]</dt>
                                                <dd class="mt-1 text-sm text-secondary-900 sm:col-span-2 sm:mt-0">@workflow.Description</dd>
                                            </div>
                                            <div class="bg-secondary-100 px-4 py-1 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                                <dt class="text-sm font-medium text-secondary-500">@T["Workflows.Fields.Status"]</dt>
                                                <dd class="mt-1 text-sm text-secondary-900 sm:col-span-2 sm:mt-0">@workflow.Status</dd>
                                            </div>
                                            <div class="bg-secondary-100 px-4 py-1 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                                <dt class="text-sm font-medium text-secondary-500">@T["Workflows.Fields.Target"]</dt>
                                                <dd class="mt-1 text-sm text-secondary-900 sm:col-span-2 sm:mt-0">@workflow.Target</dd>
                                            </div>
                                            @if (workflow.Features?.Count > 0)
                                            {
                                                foreach (var feature in workflow.Features)
                                                {
                                                    <dt class="bg-secondary-100 text-sm font-medium text-secondary-500"></dt>
                                                    <dd class="bg-secondary-100 mt-1 text-sm text-secondary-900 text-secondary-900 sm:col-span-2 sm:mt-0" style="max-height: 200px; overflow: auto;">
                                                        <ul role="list" class="divide-y divide-secondary-200 rounded-md border border-secondary-200">
                                                            <li class="flex items-center justify-between py-3 pl-3 pr-4 text-sm">
                                                                <div class="flex w-0 flex-1 items-center">
                                                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-5 h-5 flex-shrink-0 text-secondary-400" aria-hidden="true">
                                                                        <path fill-rule="evenodd" d="M8.737 8.737a21.49 21.49 0 0 1 3.308-2.724m0 0c3.063-2.026 5.99-2.641 7.331-1.3 1.827 1.828.026 6.591-4.023 10.64-4.049 4.049-8.812 5.85-10.64 4.023-1.33-1.33-.736-4.218 1.249-7.253m6.083-6.11c-3.063-2.026-5.99-2.641-7.331-1.3-1.827 1.828-.026 6.591 4.023 10.64m3.308-9.34a21.497 21.497 0 0 1 3.308 2.724m2.775 3.386c1.985 3.035 2.579 5.923 1.248 7.253-1.336 1.337-4.245.732-7.295-1.275M14 12a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z" clip-rule="evenodd" />
                                                                    </svg>
                                                                    <span class="ml-2 w-0 flex-1">@feature</span>
                                                                </div>
                                                            </li>
                                                        </ul>
                                                    </dd>
                                                }
                                            }
                                            <div class="bg-secondary-100 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                                                <dt class="text-sm font-medium text-secondary-500"></dt>
                                                <dd class="mt-1 py-2 text-sm text-secondary-900 sm:col-span-2 sm:mt-0" style="display: flex; justify-content: end">
                                                    <button type="button" @onclick="@(e => NavigationManager.NavigateTo($"/dashboard/datasets/workflows/view/{workflow.Uuid}"))" class="text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:outline-none focus:ring-primary-300 font-medium rounded-lg text-sm px-4 py-2">@T["Workflows.Submitted.View"]</button>
                                                </dd>
                                            </div>
                                            <div>
                                                <hr />
                                            </div>
                                        </dl>
                                    </div>
                                </div>
                            }
                            <Pager @bind-PageNumber="Page" PageSize="PageSize" TotalItems="Results.RecordsTotal" RefreshRequestedHandler="async() => { await ReloadAsync(); }" />
                        }
                    }

                </div>
            </div>
        }
    </div>
</div>